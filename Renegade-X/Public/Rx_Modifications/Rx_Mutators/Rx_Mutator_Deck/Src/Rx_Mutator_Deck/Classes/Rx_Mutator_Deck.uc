/*******************************************************************************
 * Rx_Mutator_Deck generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Rx_Mutator_Deck extends UTMutator
    hidecategories(Navigation,Movement,Collision);

/** Gravity along Z axis applied to objects in physics volumes which had default gravity. */
var() float GravityZ;
/** Game speed modifier. */
var() float GameSpeed;
var int max_players;
var Rx_CapturableMCT_MC MC;

function InitMutator(string Options, out string ErrorMessage)
{
    WorldInfo.WorldGravityZ = GravityZ;
    WorldInfo.Game.SetGameSpeed(GameSpeed);
    super(Mutator).InitMutator(Options, ErrorMessage);

}

simulated function PostBeginPlay()
{
    super(Actor).PostBeginPlay();

    foreach AllActors(class'Rx_CapturableMCT_MC', MC)
    {
        break;        
    }    
    SetTimer(2.0, true);
}

simulated function Timer()
{
    local Rx_Pawn Player;


    foreach DynamicActors(class'Rx_Pawn', Player)
    {
		if(Player.HealthMax <= 100)
		{
			Player.HealthMax = Player.HealthMax + 100;
			Player.Health = Player.HealthMax;
		}

		if(Player.HealthMax > 150)
		{
			Player.HealthMax = 200;
		}

		if(Player.Health > Player.HealthMax)
		{
			Player.Health = Player.HealthMax;
		}
		
		continue;
	}
}

function bool CheckReplacement(Actor Other)
{
//    if(((Rx_Weapon(Other) != none) && Rx_Weapon_Deployable(Other) == none) && Rx_Weapon_Grenade(Other) == none)
//    {
//        Rx_Weapon(Other).bHasInfiniteAmmo = true;
//    }
    
	if(Other.IsA('Rx_TeamInfo'))
    {
        Rx_Game(WorldInfo.Game).DefaultPawnClass = class'Rx_Mutator_Deck_Pawn';
        Rx_Game(WorldInfo.Game).PlayerControllerClass = class'Rx_Mutator_Deck_Controller';
    }
	
	if (Other.IsA('Rx_InventoryManager_Nod_StealthBlackHand'))
	{
		Rx_InventoryManager_Nod_StealthBlackHand(Other).PrimaryWeapons[0] = class'Rx_Weapon_LaserRifle';
		Rx_InventoryManager_Nod_StealthBlackHand(Other).PrimaryWeapons[1] = class'Rx_Weapon_TimedC4';
		Rx_InventoryManager_Nod_StealthBlackHand(Other).SidearmWeapons[0] = class'Rx_Weapon_SMG_Silenced_Nod';
	}

    return true;

}


defaultproperties
{
    GravityZ=-300.0
    GameSpeed=1.30
}